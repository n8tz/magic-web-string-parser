#!/usr/bin/env node
'use strict';
const fs            = require('fs'),
      argz          = require('minimist')(process.argv.slice(2)),
      decEverything = require('../');
let output          = [],
    parsed,
    help            = argz.h || argz.help,
    data            = !help && (argz.input || argz.i || fs.readFileSync(0, 'utf-8')),
    showPaths       = argz.p || argz.path,
    toSelect        = [];

if ( help ) {
	console.log(
		`Help :
	(StdIn)         : Input string ( Ex : mws-decode <<< "someStringToParse" )
	-i, --input     : Input string
	--raw           : Output query-able parsed tree
	--vars          : Output all props found with theirs raw values
	--stats         : Output all found types with theirs occurrences count
	-p, --path      : Output with Json Paths
	-s, --select    : Select matching nodes, set new value if provided, print results
		Ex :
			Set & select a value in all Json / Qs leaf props ( having a primitive value like Number, String,... ) :
				-s="$..Prop.*.value[?(@.isLeaf)] << payload"
			Set & select a value in all Json / Qs leaf props with a key matching /url/ig :
				-s="$..Prop[?(/url/ig.test(@.key))].value[?(@.isLeaf)] << payload"
			Select all Paths found in a child prop of a Qs section :
				-s="$..Qs..Path"
`
	)
	process.exit(0);
}
if ( !data.length )
	throw "No input data"

if ( Array.isArray(argz.s) )
	toSelect.push(...argz.s);
else if ( argz.s )
	toSelect.push(argz.s);

if ( Array.isArray(argz.select) )
	toSelect.push(...argz.select);
else if ( argz.select )
	toSelect.push(argz.select);
try {
	parsed = decEverything.parse(data);
	if ( toSelect.length ) {
		toSelect.forEach(
			params => {
				let selector = params.split(" <<")[0],
				    value    = params.substring(selector.length + 3),
				    useRaw, enumOutput;
				output.push(...parsed.get(selector).map(( r, i ) => ([selector + " (" + i + ")", r])));
			}
		)
		console.log(
			output.map(( [selector, match] ) => (
				           (showPaths ? selector + " : " : "") +
				           (
					           match?.__path
					           ? stringifyMaxDepth(match, 1, 2)
					           : JSON.stringify(match)
				           )
			           )
			).join("\n")
		);
	}
	else {
		if ( process.argv.includes("--raw") )
			console.log(JSON.stringify(parsed.jsonPathRoot, null, 2))
		else if ( process.argv.includes("--stats") )
			console.log(parsed.printStats())
		else if ( process.argv.includes("--vars") )
			console.log(parsed.printVars(showPaths))
		else
			console.log(parsed.printVarTree())
	}
} catch ( e ) {
	console.error("Fail :", e);
}

function stringifyMaxDepth( obj, depth = 1, ident ) {
	// recursion limited by depth arg
	if ( !obj || typeof obj !== 'object' ) return JSON.stringify(obj)
	
	let curDepthResult = Array.isArray(obj)
	                     ? '"<Array(' + obj.length + ')>"' // too deep
	                     : '"<Object>"';
	if ( depth > 0 ) {
		if ( Array.isArray(obj) )
			curDepthResult = "[" + Object.keys(obj)
			                             .map(( key ) => {
				                             let val = stringifyMaxDepth(obj[key], depth, ident)
				                             if ( val === undefined ) val = 'null'
				                             return `${val}`
			                             })
			                             .join(', ') + "]"
		else
			curDepthResult = "{" + Object.keys(obj)
			                             .map(( key ) => {
				                             let val = stringifyMaxDepth(obj[key], depth - 1, ident)
				                             if ( val === undefined ) val = 'null'
				                             return `"${key}": ${val}`
			                             })
			                             .join(', ') + "}"
		//curDepthResult = `{${curDepthResult}}`
	}
	
	return JSON.stringify(JSON.parse(curDepthResult), null, ident)
}
